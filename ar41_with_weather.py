import requests
import pandas as pd
from pathlib import Path
import json

date_list = [
	"2023-08-01T00:00:00.000000000",
	"2023-08-24T00:00:00.000000000",
	"2023-08-23T00:00:00.000000000",
	"2023-08-25T00:00:00.000000000",
	"2023-08-02T00:00:00.000000000",
	"2023-08-17T00:00:00.000000000",
	"2023-08-03T00:00:00.000000000",
	"2023-08-04T00:00:00.000000000",
	"2023-08-05T00:00:00.000000000",
	"2023-08-06T00:00:00.000000000",
	"2023-08-07T00:00:00.000000000",
	"2023-08-08T00:00:00.000000000",
	"2023-08-09T00:00:00.000000000",
	"2023-08-10T00:00:00.000000000",
	"2023-08-11T00:00:00.000000000",
	"2023-08-12T00:00:00.000000000",
	"2023-08-13T00:00:00.000000000",
	"2023-08-14T00:00:00.000000000",
	"2023-08-15T00:00:00.000000000",
	"2023-08-16T00:00:00.000000000",
	"2023-08-18T00:00:00.000000000",
	"2023-08-19T00:00:00.000000000",
	"2023-08-20T00:00:00.000000000",
	"2023-08-21T00:00:00.000000000",
	"2023-08-22T00:00:00.000000000",
	"2023-08-26T00:00:00.000000000",
	"2023-08-27T00:00:00.000000000",
	"2023-08-28T00:00:00.000000000",
	"2023-04-17T00:00:00.000000000",
	"2023-04-18T00:00:00.000000000",
	"2023-04-12T00:00:00.000000000",
	"2023-04-03T00:00:00.000000000",
	"2023-04-26T00:00:00.000000000",
	"2023-04-27T00:00:00.000000000",
	"2023-04-28T00:00:00.000000000",
	"2023-04-02T00:00:00.000000000",
	"2023-04-04T00:00:00.000000000",
	"2023-04-16T00:00:00.000000000",
	"2023-04-14T00:00:00.000000000",
	"2023-04-13T00:00:00.000000000",
	"2023-04-11T00:00:00.000000000",
	"2023-04-19T00:00:00.000000000",
	"2023-04-20T00:00:00.000000000",
	"2023-04-23T00:00:00.000000000",
	"2023-04-24T00:00:00.000000000",
	"2023-04-21T00:00:00.000000000",
	"2023-04-25T00:00:00.000000000",
	"2023-04-22T00:00:00.000000000",
	"2023-04-10T00:00:00.000000000",
	"2023-04-05T00:00:00.000000000",
	"2023-04-06T00:00:00.000000000",
	"2023-04-07T00:00:00.000000000",
	"2023-04-01T00:00:00.000000000",
	"2023-04-09T00:00:00.000000000",
	"2023-04-08T00:00:00.000000000",
	"2023-04-30T00:00:00.000000000",
	"2023-04-29T00:00:00.000000000",
	"2023-06-20T00:00:00.000000000",
	"2023-06-07T00:00:00.000000000",
	"2023-06-08T00:00:00.000000000",
	"2023-06-19T00:00:00.000000000",
	"2023-06-21T00:00:00.000000000",
	"2023-06-09T00:00:00.000000000",
	"2023-06-22T00:00:00.000000000",
	"2023-06-18T00:00:00.000000000",
	"2023-06-01T00:00:00.000000000",
	"2023-06-17T00:00:00.000000000",
	"2023-06-02T00:00:00.000000000",
	"2023-06-04T00:00:00.000000000",
	"2023-06-05T00:00:00.000000000",
	"2023-06-03T00:00:00.000000000",
	"2023-06-06T00:00:00.000000000",
	"2023-06-11T00:00:00.000000000",
	"2023-06-12T00:00:00.000000000",
	"2023-06-13T00:00:00.000000000",
	"2023-06-14T00:00:00.000000000",
	"2023-06-15T00:00:00.000000000",
	"2023-06-16T00:00:00.000000000",
	"2023-06-10T00:00:00.000000000",
	"2023-03-17T00:00:00.000000000",
	"2023-03-21T00:00:00.000000000",
	"2023-03-22T00:00:00.000000000",
	"2023-03-23T00:00:00.000000000",
	"2023-03-15T00:00:00.000000000",
	"2023-03-16T00:00:00.000000000",
	"2023-03-30T00:00:00.000000000",
	"2023-03-31T00:00:00.000000000",
	"2023-03-13T00:00:00.000000000",
	"2023-03-14T00:00:00.000000000",
	"2023-03-11T00:00:00.000000000",
	"2023-03-29T00:00:00.000000000",
	"2023-03-28T00:00:00.000000000",
	"2023-03-27T00:00:00.000000000",
	"2023-03-03T00:00:00.000000000",
	"2023-03-04T00:00:00.000000000",
	"2023-03-10T00:00:00.000000000",
	"2023-03-05T00:00:00.000000000",
	"2023-03-12T00:00:00.000000000",
	"2023-03-09T00:00:00.000000000",
	"2023-03-26T00:00:00.000000000",
	"2023-03-25T00:00:00.000000000",
	"2023-03-24T00:00:00.000000000",
	"2023-03-18T00:00:00.000000000",
	"2023-03-19T00:00:00.000000000",
	"2023-05-22T00:00:00.000000000",
	"2023-05-18T00:00:00.000000000",
	"2023-05-19T00:00:00.000000000",
	"2023-05-17T00:00:00.000000000",
	"2023-05-16T00:00:00.000000000",
	"2023-05-28T00:00:00.000000000",
	"2023-05-29T00:00:00.000000000",
	"2023-05-13T00:00:00.000000000",
	"2023-05-14T00:00:00.000000000",
	"2023-05-01T00:00:00.000000000",
	"2023-05-12T00:00:00.000000000",
	"2023-05-31T00:00:00.000000000",
	"2023-05-30T00:00:00.000000000",
	"2023-05-21T00:00:00.000000000",
	"2023-05-20T00:00:00.000000000",
	"2023-05-26T00:00:00.000000000",
	"2023-05-27T00:00:00.000000000",
	"2023-05-05T00:00:00.000000000",
	"2023-05-06T00:00:00.000000000",
	"2023-05-07T00:00:00.000000000",
	"2023-09-01T00:00:00.000000000",
	"2023-09-02T00:00:00.000000000",
	"2023-09-03T00:00:00.000000000",
	"2023-09-04T00:00:00.000000000",
	"2023-09-05T00:00:00.000000000",
	"2023-09-06T00:00:00.000000000",
	"2023-09-07T00:00:00.000000000",
	"2023-09-08T00:00:00.000000000",
	"2023-09-09T00:00:00.000000000",
	"2023-09-10T00:00:00.000000000",
	"2023-09-11T00:00:00.000000000",
	"2023-09-12T00:00:00.000000000",
	"2023-09-13T00:00:00.000000000",
	"2023-02-02T00:00:00.000000000",
	"2023-02-15T00:00:00.000000000",
	"2023-02-16T00:00:00.000000000",
	"2023-02-17T00:00:00.000000000",
	"2023-02-14T00:00:00.000000000",
	"2023-02-10T00:00:00.000000000",
	"2023-02-11T00:00:00.000000000",
	"2023-02-12T00:00:00.000000000",
	"2023-02-09T00:00:00.000000000",
	"2023-02-23T00:00:00.000000000",
	"2023-02-24T00:00:00.000000000",
	"2023-02-22T00:00:00.000000000",
	"2023-02-25T00:00:00.000000000",
	"2023-02-26T00:00:00.000000000",
	"2023-02-18T00:00:00.000000000",
	"2023-02-19T00:00:00.000000000",
	"2023-02-04T00:00:00.000000000",
	"2023-02-05T00:00:00.000000000",
	"2023-02-03T00:00:00.000000000",
	"2023-02-07T00:00:00.000000000",
	"2023-02-08T00:00:00.000000000",
	"2023-06-23T00:00:00.000000000",
	"2023-06-24T00:00:00.000000000",
	"2023-06-25T00:00:00.000000000",
	"2023-06-26T00:00:00.000000000",
	"2023-06-27T00:00:00.000000000",
	"2023-06-28T00:00:00.000000000",
	"2023-06-29T00:00:00.000000000",
	"2023-06-30T00:00:00.000000000",
	"2023-08-29T00:00:00.000000000",
	"2023-08-30T00:00:00.000000000",
	"2023-08-31T00:00:00.000000000",
	"2023-07-27T00:00:00.000000000",
	"2023-07-26T00:00:00.000000000",
	"2023-07-25T00:00:00.000000000",
	"2023-07-28T00:00:00.000000000",
	"2023-07-29T00:00:00.000000000",
	"2023-07-30T00:00:00.000000000",
	"2023-07-31T00:00:00.000000000",
	"2023-07-21T00:00:00.000000000",
	"2023-04-15T00:00:00.000000000",
	"2022-08-22T00:00:00.000000000",
	"2023-01-26T00:00:00.000000000",
	"2023-01-05T00:00:00.000000000",
	"2023-01-31T00:00:00.000000000",
	"2023-01-13T00:00:00.000000000",
	"2023-01-24T00:00:00.000000000",
	"2023-01-25T00:00:00.000000000",
	"2023-01-15T00:00:00.000000000",
	"2023-01-12T00:00:00.000000000",
	"2023-01-07T00:00:00.000000000",
	"2023-01-30T00:00:00.000000000",
	"2023-01-29T00:00:00.000000000",
	"2023-01-28T00:00:00.000000000",
	"2023-01-23T00:00:00.000000000",
	"2023-01-27T00:00:00.000000000",
	"2023-01-11T00:00:00.000000000",
	"2023-01-14T00:00:00.000000000",
	"2023-01-08T00:00:00.000000000",
	"2023-01-06T00:00:00.000000000",
	"2023-01-10T00:00:00.000000000",
	"2023-01-04T00:00:00.000000000",
	"2023-07-11T00:00:00.000000000",
	"2023-07-01T00:00:00.000000000",
	"2023-07-12T00:00:00.000000000",
	"2023-07-10T00:00:00.000000000",
	"2023-07-16T00:00:00.000000000",
	"2023-07-15T00:00:00.000000000",
	"2023-07-02T00:00:00.000000000",
	"2023-07-13T00:00:00.000000000",
	"2023-07-03T00:00:00.000000000",
	"2023-07-14T00:00:00.000000000",
	"2023-07-04T00:00:00.000000000",
	"2023-07-05T00:00:00.000000000",
	"2023-07-06T00:00:00.000000000",
	"2023-07-07T00:00:00.000000000",
	"2023-07-08T00:00:00.000000000",
	"2023-07-09T00:00:00.000000000",
	"2023-07-17T00:00:00.000000000",
	"2023-07-18T00:00:00.000000000",
	"2023-07-19T00:00:00.000000000",
	"2023-07-20T00:00:00.000000000",
	"2023-07-22T00:00:00.000000000",
	"2023-07-23T00:00:00.000000000",
	"2023-07-24T00:00:00.000000000",
	"2023-05-02T00:00:00.000000000",
	"2023-05-03T00:00:00.000000000",
	"2023-05-04T00:00:00.000000000",
	"2023-05-25T00:00:00.000000000",
	"2023-05-23T00:00:00.000000000",
	"2023-05-15T00:00:00.000000000",
	"2023-05-10T00:00:00.000000000",
	"2023-05-11T00:00:00.000000000",
	"2023-05-09T00:00:00.000000000",
	"2023-05-24T00:00:00.000000000",
	"2023-05-08T00:00:00.000000000",
	"2023-03-01T00:00:00.000000000",
	"2023-03-02T00:00:00.000000000",
	"2023-03-08T00:00:00.000000000",
	"2023-03-07T00:00:00.000000000",
	"2023-03-06T00:00:00.000000000",
	"2023-03-20T00:00:00.000000000",
	"2023-02-13T00:00:00.000000000",
	"2023-02-06T00:00:00.000000000",
	"2023-02-27T00:00:00.000000000",
	"2023-02-28T00:00:00.000000000",
	"2023-02-20T00:00:00.000000000",
	"2023-02-01T00:00:00.000000000",
	"2023-02-21T00:00:00.000000000",
	"2023-01-16T00:00:00.000000000",
	"2023-01-21T00:00:00.000000000",
	"2023-01-09T00:00:00.000000000",
	"2023-01-22T00:00:00.000000000",
	"2023-01-20T00:00:00.000000000",
	"2022-11-08T00:00:00.000000000",
	"2023-01-03T00:00:00.000000000",
	"2023-01-01T00:00:00.000000000",
	"2022-10-14T00:00:00.000000000",
	"2023-01-18T00:00:00.000000000",
	"2023-01-17T00:00:00.000000000",
	"2022-11-21T00:00:00.000000000",
	"2022-12-19T00:00:00.000000000",
]


def get_weather_data(date_list):
	BASE_URL = "https://archive-api.open-meteo.com/v1/archive?latitude=50.876406&longitude=4.228568&start_date={}&end_date={}&hourly=temperature_2m,precipitation,windspeed_10m&daily=temperature_2m_mean&timezone=auto"
	POLLEN_URL = "https://air-quality-api.open-meteo.com/v1/air-quality?latitude=50.876406&longitude=4.228568&hourly=dust,alder_pollen,birch_pollen,grass_pollen,mugwort_pollen,olive_pollen,ragweed_pollen&timezone=auto&start_date={}&end_date={}"
	folder_name = Path("weather_data")
	folder_name.mkdir(exist_ok=True)
	for date in date_list:
		date = date.split("T")[0]
		url_weather = BASE_URL.format(date, date)
		url_pollen = POLLEN_URL.format(date, date)
		result_filename = folder_name / (date + "weather.json")
		result_filename_pollen = folder_name / (date + "pollen.json")

		if not result_filename.exists():
			response = requests.get(url_weather)
			if response.status_code == 200:
				response_data = response.json()
				with open(result_filename, "w", encoding="utf-8") as fichier_json:
					json.dump(response_data, fichier_json)

			else:
				print(f"Error {response.status_code} with date {date}")

		if not result_filename_pollen.exists():
			response2 = requests.get(url_pollen)
			if response2.status_code == 200:
				response_data = response2.json()
				with open(
					result_filename_pollen, "w", encoding="utf-8"
				) as fichier_json:
					json.dump(response_data, fichier_json)

			else:
				print(f"Error {response2.status_code} with date {date}")

	print("DONE downloading weather data")


def add_weather_data(
	date_list,
	data,
):
	new_columns = ["temperature", "precipitation", "windspeed_10m", "sum_pollen"]

	for column in new_columns:  # add new columns
		data[column] = None

	weather_data_folder = Path("weather_data")
	pollen_types = ["alder_pollen", "birch_pollen", "grass_pollen", "mugwort_pollen", "olive_pollen", "ragweed_pollen"]

	for date in date_list:
		date = date.split("T")[0]
		pollen_data_filename = weather_data_folder / (
			date + "pollen.json"
		)  # get data from weather_data_folder
		file = open(pollen_data_filename)
		pollen_date = json.load(file)
		pollen_date_hours_dict = {}
		
		hourly_data = pollen_date['hourly']

		hourly_sums = [0] * 24

		for hour in range(24):
			for pollen_type in pollen_types:
				value = hourly_data[pollen_type][hour]
				if value is not None:
					hourly_sums[hour] += value
		pollen_date_hours_dict[date] = hourly_sums

		weather_data_filename = weather_data_folder / (date + "weather.json")
		file = open(weather_data_filename)
		weather_date = json.load(file)
		sub_data = data.loc[date]
		

		for index in sub_data.index.to_list():
			sub_data_hour_index = index.hour
			data.loc[index, "temperature"] = weather_date["hourly"]["temperature_2m"][
				sub_data_hour_index
			]
			data.loc[index, "precipitation"] = weather_date["hourly"]["precipitation"][
				sub_data_hour_index
			]
			data.loc[index, "windspeed_10m"] = weather_date["hourly"]["windspeed_10m"][
				sub_data_hour_index
			]
			data.loc[index, "sum_pollen"] = pollen_date_hours_dict[date][sub_data_hour_index]

	# print(data.head())
	# print("writing ...")
	# data.to_csv("ar41_with_weather.csv", sep=";", index=False)
	return data


if __name__ == "__main__":
	counter = 0
	chuck_folder = Path("chucks")
	for chuck in pd.read_csv("ar41_for_ulb_dropped.csv", delimiter=";", parse_dates=True, index_col='timestamps_UTC', chunksize=100000):

		chuck.drop(["Unnamed: 0"], axis=1, inplace=True)
		print(chuck.head())
		# get_weather_data(date_list)
		chuck = add_weather_data(date_list, chuck)
		chuck_filename = chuck_folder / f"chuck_{counter}.csv"
		print(f"Writing chucks {counter}")
		chuck.to_csv(chuck_filename, sep=";")
		counter += 1


	print("Done !")
